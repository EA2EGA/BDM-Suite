* =============== B D 3 2 - C O M M A N D   F I L E =================== *
* ===================================================================== *
* =============== ERASE =============================================== *
* ===================================================================== *
*
* Prepare a Saab Trionic ECU to run a Target-Resident Command Driver
*
* This script makes the SRAM module in MC68322 and MC68377 CPUs present
* present in Saab Trionic 5.x, 7 and 8 ECUs available at address 0x100000
*
* The script must be executed before the FLASH chips can be read (DUMP a
* .BIN file), programmed (FLASH a .BIN file), erased (forceably erase 28F
* FLASH chips in T5.x ECUs only) or checked (test checksum as a quick way 
* of verifying that the .BIN file is OK).
*
* ===================================================================== *
*
* Created by Sophie Dexter
* This would not have been posssibly without Patrik Servin's original
* work or subsequent contributions from J.K. Nillson, Dilemma, General
* Failure, johnc, uglybug., krzykoz and many others - please accept my
* apologies if I haven't given you credit.
*
* Version 1.0
* 06-Sep-2012
*
* ===================================================================== *
*
* Version 1.1
* 26-May-2013
* 
* Version 1.0 did not work for T8 ECUs because of a memory problem. To be
* quite honest I am still confused, but the MC68377 reference manual is
* ambiguous when describing its SRAM Module configuration.
*
* I have changed the memory module used in the MC68377 CPU based on
* information in PE Micro's algorithm 'AMD_29BL802C-B_1x16x512k_377.32P':
* NO_ON_CHIP_RAM
* WRITE_WORD=1000/00FFF684/    ;DPTRAM at $00100000
*
* I have also disabled 'system protection' to prevent the ECU resetting.
*
* ===================================================================== *
*
* Version 1.2
* 01-Dec-2013
* 
* Customised version of 'prep' to interoperate with bdmsuite.bat
* Usage: do erasew
*
* ===================================================================== *
* Reset ECU
reset
* Stop execution
stop
* ===================================================================== *
* Set up MC68332 and MC68377 control registers essential for the Drivers
* ===================================================================== *
* Enable MC68332's 2kByte TPURAM and map it to address 0x00100000
* TPURAM Base Address and Status Register (TRAMBAR) 0xFFFB04 = 0x1000
*
* The MC68377 CPU in Trionic 8 ECUs has a similar, 6kbyte, DPTRAM module
* DPTRAM Array Base Address Register (DPTBAR) 0xFFF684 = 0x1000
*
* The difference between SIMCR/MCR registers after reset can be used
* to determine ECU/CPU type and how to configure the SRAM registers
* SIMCR 0xFFFA00 = 0x60CF means MC68332 CPU (expected 0x00CF ???)
*   MCR 0xFFFA00 = 0x7E4F means MC68377 CPU
* I use bit 7 in the SIMCR/MCR to calculate the address of TRAMBAR/DPTBAR
*
mm 0xfff684+((*0xfffa00.w&0x80)*0x09)
0x1000.
* ===================================================================== *
* Disable watchdog and system protection
*
* Something in the T8 ECUs will reset the entire ECU if my program takes
* too long to return control to BD32, as the checkesum calculation does!
* Simply disabling the watchdog (register 0xFFFA50 for the MC68377)
* does not prevent this behavior, neither does 'servicing' the watchdog.
*
* The only way I have been able to find is to totally disable the
* MC68377's system protection module (BIM) by setting the SYSPROT bit in
* the Module Disable Register (MDR) at address 0xFFFA04. The MDR can only
* be written when the CPU is in 'supervisor' mode. Unfortunately the
* driver programs run in 'user' mode and I don't know how to change the
* mode. But, BD32 puts the CPU into supervisor mode allowing me to write
* to the register in this BD32 'do' script.
*
* If I find an MC68332 CPU I disable the watchdog by clearing the system
* protection control register (SYPCR) at address 0xFFFA21 in the MC68332.
*
* I use bit 7 in the SIMCR/MCR to calculate the address of BIM/SYPCR
* I use bit 12 in the SIMCR/MCR to calculate a value to put in BIM/SYPCR
*
mm 0xfffa04+0x1d*((*0xfffa00.w&0x80)>>7);b
(*0xfffa00.w&0x1000)>>12.
* ===================================================================== *
* tell BD32 to use internal RAM 0x00100000 for target resident driver
driver 0x00100000
*
cls
* ===================================================================== *
* ===================================================================== *
*                                                                       *
* WARNING: Use at your own risk, sadly this software comes with no gua- *
* rantees. This software is provided 'free' and in good faith, but the  *
* author does not accept liability for any damage arising from its use. *
*                                                                       *
* ===================================================================== *
* ===================================================================== *
*
* Your ECU is now prepared for DUMPing, FLASHing, ERASEing or CHECKing. *
eraseecu
wait
exit
